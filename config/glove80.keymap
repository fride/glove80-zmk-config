/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include "glove80.h"
#include "altrepeat.dtsi"

#define my_tapping_term 170
#define my_quick_tapping_term 55

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT       0
#define ALPHA2        1
#define LOWER         2
#define LAYER_CONFIG  3
#define FACTORY_TEST  4

// #define CONFIG &config_layer LAYER_CONFIG 0
#define NAV_SPC &lt LOWER SPACE
#define PUQ &sl ALPHA2

#define     my_hrm_config \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "balanced"; \
            hold-trigger-on-release; \
            tapping-term-ms = <my_tapping_term>; \
            quick-tap-ms = <my_quick_tapping_term>

&mt {
    tapping-term-ms = <my_tapping_term>;
};
&sl {
    release-after-ms = <my_tapping_term>;
    ignore-modifiers;          // allow chording sticky mods & layers
};
&caps_word {
    continue-list = <UNDER MINUS BSPC DEL LEFT RIGHT>;
};

&sk { quick-release; };

/ {
    behaviors {

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };


         hm: homerow_mods { // use on either hand
            my_hrm_config;
            bindings = <&kp>, <&kp>;
        };

        hmr: homerow_mods_right { // use on right hand to mod left
            my_hrm_config;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
        };

        hml: homerow_mods_left { // use on left hand to mod right
            my_hrm_config;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                                   &kp F6         &kp F7      &kp F8      &kp F9      &kp F10
            &kp EQUAL      &kp N1   &kp N2      &kp N3      &kp N4        &kp N5                                                                          &kp N6     &kp N7         &kp N8      &kp N9      &kp N0      &kp MINUS
            &kp TAB        &kp Q    &kp L       &kp D       &kp C         &kp V                                                                           &kp K      &ad_rep_magic  &kp O       &kp U       &kp J       &kp BSLH
            &kp ESC        &kp N    &kp R       &kp T       &kp S         &kp G                                                                           &kp F      &kp M          &kp E       &kp I       &kp A       &kp SQT
            &kp GRAVE      &kp B    &kp X       &kp P       &kp W         &kp Z   &kp LSFT    &kp LCTRL   &bootloader  &bootloader  &kp RCTRL &kp LSFT    &kp SQT    &kp H          &kp COMMA   &kp DOT     &kp Y       &kp PG_UP
            &kp GRAVE      &kp HOME &kp END     &kp LEFT    &kp X                 NAV_SPC     &kp DEL     &kp LALT     &kp RALT     PUQ       &skq LSFT              &kp UP         &kp DOWN    &kp LBKT    &kp RBKT    &kp GRAVE
            >;
        };

        alpha2 {
            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                                   &kp F6         &kp F7      &kp F8      &kp F9      &kp F10
            &kp EQUAL      &kp N1   &kp N2      &kp N3      &kp N4        &kp N5                                                                          &kp N6     &kp N7         &kp N8      &kp N9      &kp N0      &kp MINUS
            &kp TAB        &kp Z    &kp M       &kp L       &kp C         &kp G                                                                           &kp Q      &kp COMMA      PUQ         &kp RA(U)   &kp RA(S)       &kp BSLH
            &kp ESC        &kp S    &hml LALT N &hml LCTL R &hml LGUI T   &kp D                                                                           &kp RA(O)  &kp RA(A)      &none       &hmr LALT I &kp H       &kp SQT
            &kp GRAVE      &kp F    &kp B       &kp W       &kp V         &kp J   &kp LSFT    &kp LCTRL   &bootloader  &bootloader  &kp RCTRL &kp LSFT    &kp X      &kp SQT        &kp DOT     &kp Y       &kp K       &kp PG_UP
            &kp GRAVE           &kp HOME &kp END     &kp LEFT    &kp X                 NAV_SPC     &kp DEL     &kp LALT     &kp RALT     &kp RET   &skq LSFT              &kp UP         &kp DOWN    &kp LBKT    &kp RBKT    &kp GRAVE
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE    &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM    &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp BACKSPACE &kp UP       &kp DELETE    &kp KP_MINUS    &kp SLCK
            &trans            &skq LSFT           &skq LCTL       &skq LALT       &skq LGUI       &kp PG_UP                                                                             &kp TAB      &kp LEFT      &kp DOWN     &kp RIGHT     &kp ENTER       &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1     &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0     &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
              bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
