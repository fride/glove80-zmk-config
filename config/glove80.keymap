/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HOST_OS 2
#define QUICK_TAP_MS 175

#include "../zmk-nodefree-config/helper.h"
#include "fride_config.h"

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"
#include "../zmk-nodefree-config/international_chars/greek.dtsi"

#define HOME_D &hrm_d LGUI  D 
#define HOME_R &hrm_r LALT  R
#define HOME_T &hrm_t LCTRL T

#define HOME_N &hrm_n RGUI  N
#define HOME_E &hrm_e RALT  E
#define HOME_A &hrm_a RCTRL A

ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

/ {    

    #include "fride_macros.dtsi"
    #include "fride_behaviors.dtsi"
    #include "fride_combos.dtsi"
 /*

   Q W F P B    J L U Y ;
   A R S T G    M N E I O
   Z X C D V    K H , . /

*/
    keymap {
        compatible = "zmk,keymap";
        default_layer {
               bindings = <
                &kp F1         &kp F2         &kp F3       &kp F4       &kp F5                                                                                                 &kp F6        &kp F7        &kp F8       &kp F9      &kp F10
                &kp EQUAL      &kp N1         &kp N2       &kp N3       &kp N4       &kp N5                                                                         &kp N6     &kp N7        &kp N8        &kp N9       &kp N0      &kp MINUS
                &kp Q          &kp Q          &kp W        &kp F        &kp P        &kp B                                                                          &kp J      &kp L         &kp U         &kp Y        &kp SQT     &kp Q
                &kp EQUAL      &hml LCTRL A   &hml LALT R  &hml LGUI S  &hml LSFT T  &kp G                                                                          &kp M      &hmr RSFT N   &hmr RGUI E   &hmr LALT I  &hmr RCTL O &kp Z
                &kp GRAVE      &kp Z          &kp X        &kp C        &kp D        &kp V      &kp LSHFT    &kp LCTRL   &kp L      &kp LGUI  &kp LCTRL &AppSwap    &kp K      &kp H         &comma_morph  &dot_morph   &qexcl      &kp PG_UP
                &magic MAGIC 0 &kp PIPE       &kp BSLH     &kp PIPE     &kp SLASH               NAV_SPCAE    &sl l_num  &kp DEL     &kp RALT  &kp RET   &skq LSHIFT            &kp LPAR      &kp LBKT      &kp RBKT     &kp LPAR    &magic MAGIC 0
            >;        
        };


        l_nav {
            bindings = <
                &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &trans          &kp PAUSE_BREAK
                &trans            &trans              &trans          &trans          &trans          &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
                &trans            &trans              &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp BSPC     &kp UP        &kp DEL      &kp SLCK        &none
                &trans            &sk LSHIFT          &sk LCTRL       &sk LALT        &sk LGUI       &kp PG_UP                                                                             &kp PRCNT    &kp LEFT     &kp DOWN     &kp RIGHT     &kp RIGHT       &none
                &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &AppSwap      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
                &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };
        l_num {
            bindings = <
                &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &trans             &kp PAUSE_BREAK
                &trans            &trans              &trans          &trans          &trans          &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY    &kp PSCRN
                &trans            &trans              &none           &kp UP          &none           &kp END                                                                               &kp PERCENT  &kp N7       &kp N8        &kp N9      &kp COLON          &kp K
                &trans            &sk LSHIFT          &sk LCTRL       &sk LALT        &sk LGUI        &kp PG_UP                                                                             &kp PLUS     &kp N4       &kp N5        &kp N6      &kp MINUS          &kp J
                &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &AppSwap    &trans      &to DEFAULT &kp LT      &kp GT      &kp EQUAL &kp STAR     &kp N1       &kp N2        &kp N3      &kp SLASH          &kp G
                &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &kp COMMA   &kp DOT     &kp N0                 &trans       &trans       &trans       &trans             &trans
            >;
        };

        magic_layer {
            bindings = <
                &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
                &none             &to 0               &to 1           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
                &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
                &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
                &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
                &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };

        MAGIC_LAYER(MAGIC_O,    &kp O)
        MAGIC_LAYER(MAGIC_Y,    &kp Y)
        MAGIC_LAYER(MAGIC_U   , &kp U)
        MAGIC_LAYER(MAGIC_ON  , &mg_on)
        MAGIC_LAYER(MAGIC_UST , &mg_ust)
        MAGIC_LAYER(MAGIC_S   , &kp S)
        MAGIC_LAYER(MAGIC_K   , &kp K)
        MAGIC_LAYER(MAGIC_T   , &kp T)
        MAGIC_LAYER(MAGIC_ION , &mg_ion)
        MAGIC_LAYER(MAGIC_A   , &kp A)
        MAGIC_LAYER(MAGIC_L   , &kp L)
        MAGIC_LAYER(MAGIC_M   , &kp M)
        MAGIC_LAYER(MAGIC_E   , &kp E)
        MAGIC_LAYER(MAGIC_P   , &kp P)
        MAGIC_LAYER(MAGIC_F   , &kp F)
        l_uc  {     
            bindings = < 
                    &trans            &trans              &trans          &trans          &trans                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK 
                    &trans            &trans              &trans          &trans          &trans          &kp HOME                                                                              &trans       &trans       &trans       &trans        &trans          &trans 
                    &trans            &trans              &trans          &trans          &trans          &trans                                                                                &trans       &trans       &trans       &trans        &de_eszett      &trans 
                    &trans            &trans              &trans          &trans          &trans          &trans                                                                                &trans       &trans       &trans       &trans        &trans          &trans 
                    &trans            &trans              &trans          &trans          &trans          &trans          &trans      &trans      &trans      &trans      &trans      &trans    &trans       &trans       &de_ae       &de_oe        &de_ue          &trans 
                    &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &trans       &trans       &trans        &trans          &trans 
            >; 
        };
    };
};
